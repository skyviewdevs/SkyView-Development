local w,h = term.getSize()
local dev = true --Tool for developers/modders
local msgWindow = window.create(
  term.current(),
  w/3+1,
  1,
  w-w/3,
  h
)

local mW,mH = msgWindow.getSize()

details = {
  ["ArchTyler"] = {
    status = "online"
  },
  ["RandyBobandy"] = {
    status = "online"
  },
  ["konlab"] = {
    status = "online"
  },
  ["onlineTest"] = {
    status = "online"
  },
  ["awayTest"] = {
    status = "away"
  },
  ["offlineTest"] = {
    status = "offline"
  }
}

friends = {
  "ArchTyler",
  "RandyBobandy",
  "konlab",
  "onlineTest",
  "awayTest",
  "offlineTest"
}

username = "bluebird173"

messages = {}
scroll = 1

chat = {
  say = function(message,method)
    method.out(message)
  end
}

globals = {
  settings = false
}

coroutines = {}

function cWrite(text,Y)
  term.setCursorPos(w/2-#text/2,Y)
  write(text)
end

function NYI()
  term.setBackgroundColor(colors.gray)
  term.clear()
  term.setCursorPos(1,h/2)
  term.setTextColor(colors.white)
  write("Not yet implemented.\nPress any key to continue")
  sleep(0.5)
  os.pullEvent()
end

function drawChat(messages,scroll)
  toShow = {}
  for i=scroll,mH + scroll do
    toShow[#toShow + 1] = messages[i]
  end
  msgWindow.setBackgroundColor(colors.white)
  msgWindow.clear()
  msgWindow.setCursorPos(1,mH)
  msgWindow.setBackgroundColor(colors.gray)
  msgWindow.clearLine()
  msgWindow.setBackgroundColor(colors.white)
  msgWindow.setCursorPos(1,1)
  for i=1,#toShow do
    msgWindow.setTextColor(colors.purple)
    msgWindow.write(toShow[i].user..": "..toShow[i].message.."\n")
  end
end

function handleOtherEvents() --For misc stuff that
  --doesn't need its own big coroutine
  while true do
    local event, p1, p2, p3 = os.pullEvent()
      if(event == "mouse_click") then
        click,X,Y = p1,p2,p3
        if(X==1 and Y==h) then
          sleep(0.5)
          Settings()
          showFriendsList()
          drawChat(messages,scroll)
        end
      end
  end
end

function displayFriendDetails(friend)
  
end

function Settings()
  globals.settings = true
  local function draw()
  term.setBackgroundColor(colors.gray)
  term.clear()
  term.setCursorPos(1,h)
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.lightGray)
  write("Feedback")
  term.setCursorPos(w-4,h)
  term.setBackgroundColor(colors.red)
  term.setTextColor(colors.white)
  write("Close")
  end
  draw()
  while true do
    local _, _, X, Y = os.pullEvent("mouse_click")
      if(X >=1 and X <=8 and Y==h) then
        term.setBackgroundColor(colors.white)
        term.clear()
        term.setTextColor(colors.black)
        cWrite("Please write your feedback below",h/2-1)
        term.setCursorPos(w/4,h/2)
        feedback = read()
        term.setBackgroundColor(colors.white)
        term.clear()
        cWrite("Sending...",h/2)
        send = http.post("http://45.34.14.48/skyview/feedback.php","message="..feedback)
        send.close()
        term.setBackgroundColor(colors.white)
        term.clear()
        term.setTextColor(colors.lime)
        cWrite("Sent!",h/2)
        sleep(1)
      elseif(X >=w-4 and X <=w and Y==h) then
        break
      end
      draw()
  end
  globals.settings = false
end

function showFriendsList()
  for X=1,w/3 do
    for Y=1,h do
      term.setCursorPos(X,Y)
      term.setBackgroundColor(colors.lightGray)
      write(" ")
    end
  end
  
  for i=1,#friends do
    term.setCursorPos(1,i + 1)
    status = details[friends[i]].status
    if(status == "online") then
      term.setBackgroundColor(colors.lime)
    elseif(status == "away") then
      term.setBackgroundColor(colors.orange)
    elseif(status == "offline") then
      term.setBackgroundColor(colors.red)
    end
    write(" ")
    term.setTextColor(colors.yellow)
    term.setBackgroundColor(colors.lightGray)
    write(friends[i])
  end

  term.setBackgroundColor(colors.gray)
  term.setTextColor(colors.white)
  term.setCursorPos(1,1)
  write("Friends")
  term.setCursorPos(1,h)
  term.setBackgroundColor(colors.gray)
  term.setTextColor(colors.white)
  write("#")
end

function handleChat()
  scroll = 1
  while true do
    local event, p1, p2, p3 = os.pullEvent()
      if(event == "mouse_click") then
        click,X,Y = p1,p2,p3
        if(X >=w/2-3+1 and Y==h and globals.settings == false) then
          term.setCursorPos(w/3+1,h)
          message = ""
          term.setTextColor(colors.white)
          message = read()
          toSend = {}
          toSend.user = username
          toSend.message = message
          messages[#messages + 1] = toSend
          term.setBackgroundColor(colors.black)
          term.clear()
          showFriendsList()
          drawChat(messages,scroll)
        end
      elseif(event == "mouse_scroll" and globals.settings == false) then
        direction = p1
        if(scroll >= 1) then
          if(direction == -1) then
            scroll = scroll - 1
            drawChat(messages,scroll)
            if(scroll < 1) then scroll = 1 end
          elseif(direction == 1) then
            if(scroll < #messages) then
              scroll = scroll + 1
              drawChat(messages,scroll)
            end
          end
        end
      end
  end
end

function handleFriendsList()
  while true do
    local event, p1, p2, p3 = os.pullEvent()
      if(event == "mouse_click") then
        click,X,Y = p1,p2,p3 
        if(X == 1 and Y >=2 and Y <=#friends + 1) then
          NYI()
          showFriendList()
          showMessages(messages,scroll)
        end
      end
  end
end

function drawDEV()
  if(dev) then
    for X=w + 1,w + 1 do
      for Y=1,h do
        term.setCursorPos(X,Y)
        term.setBackgroundColor(colors.red)
        term.setTextColor(colors.orange)
        write("|")
      end
    end
  end
end

showFriendsList()
drawChat(messages,scroll)

handleFriendsList = coroutine.create(handleFriendsList)
handleChat = coroutine.create(handleChat)
handleOtherEvents = coroutine.create(handleOtherEvents)

coroutine.resume(handleOtherEvents)
coroutine.resume(handleChat)
coroutine.resume(handleFriendsList)
while true do
  events = {os.pullEvent()}
  coroutine.resume(handleFriendsList,unpack(events))
  coroutine.resume(handleChat,unpack(events))
  coroutine.resume(handleOtherEvents,unpack(events))
end
